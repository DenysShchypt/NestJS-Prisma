generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id             String              @id @default(uuid())
  email          String           @unique @db.VarChar(45)
  name           String
  password       String
  passwordRepeat String
  wallet         Float            @default(0)
  createAt       DateTime         @default(now()) @map("created_at")
  updateAt       DateTime         @default(now()) @map("updated_at")
  roles          Role[]
  payment        Payment[]
  SuccessPayment SuccessPayment[]
  FailedPayment  FailedPayment[]
  Token          Token[]
  RefreshTokin   RefreshTokin[]
  @@map("users")
}

model Token {
  token  String   @unique
  exp    DateTime
  user   User     @relation(fields: [userId], references: [id])
  userId String
  @@map("tokens")
}

model RefreshTokin {
  token  String   @unique
  exp    DateTime
  userId String
  User   User     @relation(fields: [userId], references: [id])
}

model Payment {
  id        Int      @id @default(autoincrement())
  amount    Float
  currency  String
  order_id  String
  uuid      String
  status    String
  isFinal   Boolean
  address   String
  network   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model SuccessPayment {
  id        Int      @id @default(autoincrement())
  amount    Float
  currency  String
  order_id  String
  uuid      String
  status    String
  address   String
  createdAt DateTime @default(now())
  network   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model FailedPayment {
  id        Int      @id @default(autoincrement())
  amount    Float
  currency  String
  order_id  String
  uuid      String
  status    String
  address   String
  createdAt DateTime @default(now())
  network   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}
